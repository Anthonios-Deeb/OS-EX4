        -:    0:Source:main.cpp
        -:    1:#include <iostream>
        -:    2:#include <unistd.h>
        -:    3:#include "vectorList_graph.hpp"
        -:    4:
        -:    5:using namespace std;
        -:    6:
        1:    7:int main(int argc, char *argv[])
        -:    8:{
        -:    9:    int opt;
        -:   10:    int numEdges = 0, numVertices = 0;
        -:   11:    unsigned int seed = 0;
        -:   12:
        -:   13:    // Define the options
        4:   14:    while ((opt = getopt(argc, argv, "e:v:s:")) != -1)
        -:   15:    {
        3:   16:        switch (opt)
        -:   17:        {
        1:   18:        case 'e':
        1:   19:            numEdges = atoi(optarg);
        1:   20:            break;
        1:   21:        case 'v':
        1:   22:            numVertices = atoi(optarg);
        1:   23:            break;
        1:   24:        case 's':
        1:   25:            seed = static_cast<unsigned int>(atoi(optarg));
        1:   26:            break;
        -:   27:        default:
    #####:   28:            cerr << "Usage: " << argv[0] << " -e numEdges -v numVertices -s seed" << endl;
    #####:   29:            exit(EXIT_FAILURE);
        -:   30:        }
        -:   31:    }
        -:   32:
        -:   33:    // Check if all options were provided
        1:   34:    if (numEdges == 0 || numVertices == 0 || seed == 0)
        -:   35:    {
    #####:   36:        cerr << "Usage: " << argv[0] << " -e numEdges -v numVertices -s seed" << endl;
    #####:   37:        exit(EXIT_FAILURE);
        -:   38:    }
        -:   39:
        -:   40:    // Check if the number of edges is valid
        1:   41:    int maxEdges = numVertices * (numVertices - 1) / 2;
        1:   42:    if (numEdges > maxEdges)
        -:   43:    {
    #####:   44:        cerr << "Error: Number of edges cannot exceed " << maxEdges << " for " << numVertices << " vertices." << endl;
    #####:   45:        exit(EXIT_FAILURE);
        -:   46:    }
        -:   47:
        -:   48:    // Create a graph
        2:   49:    Graph graph(numVertices, numEdges, seed);
        -:   50:
        -:   51:    // Print the graph
        1:   52:    graph.printGraph();
        -:   53:
        -:   54:    // Check if the graph is Eulerian
        1:   55:    int resutl = graph.isEulerian();
        1:   56:    if (resutl == 0)
        -:   57:    {
        -:   58:        cout << "The graph is not Eulerian." << endl;
        -:   59:    }
        1:   60:    else if (resutl == 1)
        -:   61:    {
        -:   62:        cout << "The graph has Eulerian path." << endl;
        -:   63:    }
        1:   64:    else if (resutl == 2)
        -:   65:    {
        -:   66:        cout << "The graph has Eulerian cycle." << endl;
        -:   67:    }
        -:   68:
        -:   69:    return 0;
        -:   70:}
